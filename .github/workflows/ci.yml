name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23.1'

permissions:
  contents: read

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v5
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run gofmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not properly formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Build Lambda binary
        run: |
          mkdir -p build
          cd src
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -tags lambda.norpc -o ../build/bootstrap .

      - name: Verify build
        run: |
          ls -la build/
          file build/bootstrap

      - name: Test SAM build (if sam is available)
        run: |
          if command -v sam &> /dev/null; then
            echo "SAM CLI is available, testing build..."
            sam build --debug
          else
            echo "SAM CLI not available, skipping SAM build test"
          fi
        continue-on-error: true

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.1'

      - name: Terraform fmt check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

  success:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    if: always()
    
    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.terraform-validate.result }}" == "success" ]]; then
            echo "🎉 All checks passed successfully!"
            echo "✅ Go code built and validated"
            echo "✅ Terraform configuration validated"
            echo "✅ Ready for deployment"
          else
            echo "❌ Some checks failed"
            exit 1
          fi